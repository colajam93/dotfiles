#!/usr/bin/env python3

import argparse
import subprocess
import re
import sys
import collections

LIST, LIST_VMS, START, POWEROFF, LOGIN, CLONE, REMOVE, SNAPSHOT, TAKE, RESTORE = (
    'list', 'list-vms', 'start', 'poweroff', 'login', 'clone', 'remove', 'snapshot', 'take', 'restore')
V_BOX_MANAGE = 'VBoxManage'


class NoChoiceError(Exception):
    pass


def list_vms():
    completed = subprocess.run([V_BOX_MANAGE, LIST, 'vms'], stdout=subprocess.PIPE)
    return completed.stdout.decode().strip()


def list_running_vms():
    completed = subprocess.run([V_BOX_MANAGE, LIST, 'runningvms'], stdout=subprocess.PIPE)
    return completed.stdout.decode().strip()


def parse_v_box_manage_list_output(output):
    pattern = re.compile(
        r'"(?P<name>[a-zA-Z0-9 ]+)" '
        r'{(?P<uuid>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})}')
    m = re.match(pattern, output)
    if not m:
        raise ValueError
    vm_item = collections.namedtuple('VMItem', ['name', 'uuid'])
    return vm_item(name=m.group('name'), uuid=m.group('uuid'))


def interactive_choice(choices):
    choices = list(filter(None, choices))
    if not len(choices):
        raise NoChoiceError
    pattern = re.compile(
        r'"(?P<name>[a-zA-Z0-9 ]+)" '
        r'{(?P<uuid>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})}')
    vms = list(map(lambda x: re.match(pattern, x), choices))
    uuids = []
    for index, value in enumerate(vms):
        uuids.append(value.group('uuid'))
        print('{}: {}'.format(index, value.group('name')))
    try:
        return uuids[int(input('>>> ').strip())]
    except (EOFError, ValueError, IndexError):
        raise ValueError


def get_target(args, interactive_list):
    if args.interactive:
        return interactive_choice(interactive_list)
    else:
        if not args.target:
            raise ValueError
        else:
            return args.target


def run_with_exit_code(command):
    completed = subprocess.run(command)
    sys.exit(completed.returncode)


def do_list_common(args, list_func):
    vms = list_func()
    if not vms:
        sys.exit(0)
    vm_names = map(parse_v_box_manage_list_output, vms.split('\n'))
    if args.name:
        for n in vm_names:
            print(n.name)
    elif args.uuid:
        for n in vm_names:
            print(n.uuid)
    else:
        for n in vm_names:
            print('"{}" {{{}}}'.format(n.name, n.uuid))


def do_list(args):
    do_list_common(args, list_running_vms)


def do_list_vms(args):
    do_list_common(args, list_vms)


def do_start(args):
    try:
        target = get_target(args, list_vms().split('\n'))
    except NoChoiceError:
        print('No vms')
        sys.exit(1)
    except ValueError:
        args.parser.print_help()
        sys.exit(1)

    if args.with_gui:
        start_type = 'gui'
    else:
        start_type = 'headless'

    command = [V_BOX_MANAGE, 'startvm', target, '--type', start_type]
    run_with_exit_code(command)


def do_poweroff(args):
    try:
        target = get_target(args, list_running_vms().split('\n'))
    except NoChoiceError:
        print('No running vms')
        sys.exit(1)
    except ValueError:
        args.parser.print_help()
        sys.exit(1)

    if args.force:
        subcommand = 'poweroff'
    else:
        subcommand = 'acpipowerbutton'

    command = [V_BOX_MANAGE, 'controlvm', target, subcommand]
    run_with_exit_code(command)


def do_login(args):
    command = ['ssh', args.target]
    run_with_exit_code(command)


def do_clone(args):
    command = [V_BOX_MANAGE, 'clonevm', args.target, '--mode', 'machine', '--name', args.name, '--register']
    run_with_exit_code(command)


def do_remove(args):
    command = [V_BOX_MANAGE, 'unregistervm', args.target, '--delete']
    run_with_exit_code(command)


def do_snapshot_list(args):
    command = [V_BOX_MANAGE, SNAPSHOT, args.target, LIST]
    run_with_exit_code(command)


def do_snapshot_take(args):
    command = [V_BOX_MANAGE, SNAPSHOT, args.target, TAKE, args.name]
    run_with_exit_code(command)


def do_snapshot_restore(args):
    command = [V_BOX_MANAGE, SNAPSHOT, args.target, RESTORE, args.name]
    run_with_exit_code(command)


def do_snapshot_remove(args):
    command = [V_BOX_MANAGE, SNAPSHOT, args.target, 'delete', args.name]
    run_with_exit_code(command)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    def setup_list_parser(subparsers):
        parser_list = subparsers.add_parser(LIST)
        group = parser_list.add_mutually_exclusive_group()
        group.add_argument('-n', '--name', action='store_true')
        group.add_argument('-u', '--uuid', action='store_true')
        parser_list.set_defaults(func=do_list)

    setup_list_parser(subparsers)

    def setup_list_vms_parser(subparsers):
        parser_list_vms = subparsers.add_parser(LIST_VMS)
        group = parser_list_vms.add_mutually_exclusive_group()
        group.add_argument('-n', '--name', action='store_true')
        group.add_argument('-u', '--uuid', action='store_true')
        parser_list_vms.set_defaults(func=do_list_vms)

    setup_list_vms_parser(subparsers)

    def setup_start_parser(subparsers):
        parser_start = subparsers.add_parser(START)
        parser_start.add_argument('target', nargs='?')
        parser_start.add_argument('-g', '--with-gui', action='store_true')
        parser_start.add_argument('-i', '--interactive', action='store_true')
        parser_start.set_defaults(func=do_start, parser=parser_start)

    setup_start_parser(subparsers)

    def setup_poweroff_parser(subparsers):
        parser_poweroff = subparsers.add_parser(POWEROFF)
        parser_poweroff.add_argument('target', nargs='?')
        parser_poweroff.add_argument('-f', '--force', action='store_true')
        parser_poweroff.add_argument('-i', '--interactive', action='store_true')
        parser_poweroff.set_defaults(func=do_poweroff, parser=parser_poweroff)

    setup_poweroff_parser(subparsers)

    def setup_login_parser(subparsers):
        parser_login = subparsers.add_parser(LOGIN)
        parser_login.add_argument('target')
        parser_login.set_defaults(func=do_login)

    setup_login_parser(subparsers)

    def setup_clone_parser(subparsers):
        parser_clone = subparsers.add_parser(CLONE)
        parser_clone.add_argument('target')
        parser_clone.add_argument('name')
        parser_clone.set_defaults(func=do_clone)

    setup_clone_parser(subparsers)

    def setup_remove_parser(subparsers):
        parser_remove = subparsers.add_parser(REMOVE)
        parser_remove.add_argument('target')
        parser_remove.set_defaults(func=do_remove)

    setup_remove_parser(subparsers)

    def setup_snapshot_parser(subparsers):
        parser_snapshot = subparsers.add_parser(SNAPSHOT)
        parser_snapshot.add_argument('target')
        third_parsers = parser_snapshot.add_subparsers(dest='subcommand')
        third_parsers.required = True

        parser_list = third_parsers.add_parser(LIST)
        parser_list.set_defaults(func=do_snapshot_list)

        parser_take = third_parsers.add_parser(TAKE)
        parser_take.add_argument('name')
        parser_take.set_defaults(func=do_snapshot_take)

        parser_restore = third_parsers.add_parser(RESTORE)
        parser_restore.add_argument('name')
        parser_restore.set_defaults(func=do_snapshot_restore)

        parser_remove = third_parsers.add_parser(REMOVE)
        parser_remove.add_argument('name')
        parser_remove.set_defaults(func=do_snapshot_remove)

    setup_snapshot_parser(subparsers)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
