#!/usr/bin/env python3

import argparse
import subprocess
import re
import sys

LIST, LIST_VMS, START, POWEROFF, LOGIN = ('list', 'list-vms', 'start', 'poweroff', 'login')
V_BOX_MANAGE = 'VBoxManage'


class NoChoiceError(Exception):
    pass


def list_vms():
    completed = subprocess.run([V_BOX_MANAGE, 'list', 'vms'], stdout=subprocess.PIPE)
    return completed.stdout.decode().strip()


def list_running_vms():
    completed = subprocess.run([V_BOX_MANAGE, 'list', 'runningvms'], stdout=subprocess.PIPE)
    return completed.stdout.decode().strip()


def interactive_choice(choices):
    choices = list(filter(None, choices))
    if not len(choices):
        raise NoChoiceError
    pattern = re.compile(
        r'"(?P<name>[a-zA-Z0-9 ]+)" '
        r'{(?P<uuid>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})}')
    vms = list(map(lambda x: re.match(pattern, x), choices))
    uuids = []
    for index, value in enumerate(vms):
        uuids.append(value.group('uuid'))
        print('{}: {}'.format(index, value.group('name')))
    try:
        return uuids[int(input('>>> ').strip())]
    except (EOFError, ValueError, IndexError):
        raise ValueError


def get_target(args, interactive_list):
    if args.interactive:
        return interactive_choice(interactive_list)
    else:
        if not args.target:
            raise ValueError
        else:
            return args.target


def run_with_exit_code(command):
    completed = subprocess.run(command)
    sys.exit(completed.returncode)


def do_list(_):
    print(list_running_vms())


def do_list_vms(_):
    print(list_vms())


def do_start(args):
    try:
        target = get_target(args, list_vms().split('\n'))
    except NoChoiceError:
        print('No vms')
        sys.exit(1)
    except ValueError:
        args.parser.print_help()
        sys.exit(1)

    if args.with_gui:
        start_type = 'gui'
    else:
        start_type = 'headless'

    command = [V_BOX_MANAGE, 'startvm', target, '--type', start_type]
    run_with_exit_code(command)


def do_poweroff(args):
    try:
        target = get_target(args, list_running_vms().split('\n'))
    except NoChoiceError:
        print('No running vms')
        sys.exit(1)
    except ValueError:
        args.parser.print_help()
        sys.exit(1)

    if args.force:
        subcommand = 'poweroff'
    else:
        subcommand = 'acpipowerbutton'

    command = [V_BOX_MANAGE, 'controlvm', target, subcommand]
    run_with_exit_code(command)


def do_login(args):
    command = ['ssh', args.target]
    run_with_exit_code(command)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    parser_list = subparsers.add_parser(LIST)
    parser_list.set_defaults(func=do_list, parser=parser_list)

    parser_list_vms = subparsers.add_parser(LIST_VMS)
    parser_list_vms.set_defaults(func=do_list_vms, parser=parser_list_vms)

    parser_start = subparsers.add_parser(START)
    parser_start.add_argument('target', nargs='?')
    parser_start.add_argument('-g', '--with-gui', action='store_true')
    parser_start.add_argument('-i', '--interactive', action='store_true')
    parser_start.set_defaults(func=do_start, parser=parser_start)

    parser_poweroff = subparsers.add_parser(POWEROFF)
    parser_poweroff.add_argument('target', nargs='?')
    parser_poweroff.add_argument('-f', '--force', action='store_true')
    parser_poweroff.add_argument('-i', '--interactive', action='store_true')
    parser_poweroff.set_defaults(func=do_poweroff, parser=parser_poweroff)

    parser_login = subparsers.add_parser(LOGIN)
    parser_login.add_argument('target')
    parser_login.set_defaults(func=do_login, parser=parser_login)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
